  while (1) {
       if ((ret = av_read_frame(ifmt_ctx, &packet)) < 0)
           break;
       stream_index = packet.stream_index;
       type = ifmt_ctx->streams[packet.stream_index]->codec->codec_type;
       av_log(NULL, AV_LOG_DEBUG, "Demuxer gave frame of stream_index %u\n",
               stream_index);

       if (filter_ctx[stream_index].filter_graph) {
           av_log(NULL, AV_LOG_DEBUG, "Going to reencode&filter the frame\n");
           frame = av_frame_alloc();
           if (!frame) {
               ret = AVERROR(ENOMEM);
               break;
           }
           packet.dts = av_rescale_q_rnd(packet.dts,
                   ifmt_ctx->streams[stream_index]->time_base,
                   ifmt_ctx->streams[stream_index]->codec->time_base,
                   AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX);
           packet.pts = av_rescale_q_rnd(packet.pts,
                   ifmt_ctx->streams[stream_index]->time_base,
                   ifmt_ctx->streams[stream_index]->codec->time_base,
                   AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX);
           dec_func = (type == AVMEDIA_TYPE_VIDEO) ? avcodec_decode_video2 :
               avcodec_decode_audio4;
           ret = dec_func(ifmt_ctx->streams[stream_index]->codec, frame,
                   &got_frame, &packet);
           if (ret < 0) {
               av_frame_free(&frame);
               av_log(NULL, AV_LOG_ERROR, "Decoding failed\n");
               break;
           }

           if (got_frame) {
               frame->pts = av_frame_get_best_effort_timestamp(frame);
               ret = filter_encode_write_frame(frame, stream_index);
               av_frame_free(&frame);
               if (ret < 0)
                   goto end;
           } else {
               av_frame_free(&frame);
           }
       } else {
           /* remux this frame without reencoding */
           packet.dts = av_rescale_q_rnd(packet.dts,
                   ifmt_ctx->streams[stream_index]->time_base,
                   ofmt_ctx->streams[stream_index]->time_base,
                   AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX);
           packet.pts = av_rescale_q_rnd(packet.pts,
                   ifmt_ctx->streams[stream_index]->time_base,
                   ofmt_ctx->streams[stream_index]->time_base,
                   AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX);

           ret = av_interleaved_write_frame(ofmt_ctx, &packet);
           if (ret < 0)
               goto end;
       }
       av_free_packet(&packet);
   }